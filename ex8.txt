import pandas as pd
from sklearn.model_selection import KFold
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
import numpy as np

# Load data
data = pd.read_csv('housing1.csv')
X = data[['CRIM', 'LSTAT']].values  # Select specific columns
y = data['MEDV'].values             # Target column

# Scale features
X = MinMaxScaler().fit_transform(X)

# Model and cross-validator
model = SVR(kernel='rbf')
kf = KFold(n_splits=10)

# Cross-validation
scores = []
for train_idx, test_idx in kf.split(X):
    model.fit(X[train_idx], y[train_idx])
    scores.append(model.score(X[test_idx], y[test_idx]))

# Results
print("Scores:", scores)
print("Average Score:", np.mean(scores))
print("Score Standard Deviation:", np.std(scores))


import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

# Load and split data
data = pd.read_csv("wineQualityReds.csv")
X_train, X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.2, random_state=0)

# Scale and define model with parameters
X_train = StandardScaler().fit_transform(X_train)
model = RandomForestRegressor(random_state=0)
params = {'n_estimators': [100, 300], 'max_depth': [1, 2]}

# Perform grid search
grid = GridSearchCV(model, params, scoring='r2', cv=5)
grid.fit(X_train, y_train)

# Display best parameters and score
print("Best Parameters:", grid.best_params_)
print("Best Score:", grid.best_score_)



import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_digits
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import validation_curve

# Load dataset
X, y = load_digits(return_X_y=True)

# Parameter range and validation curve
param_range = range(1, 10)
train_scores, test_scores = validation_curve(KNeighborsClassifier(), X, y, param_name="n_neighbors", param_range=param_range, cv=5, scoring="accuracy")

# Calculate mean scores
mean_train = np.mean(train_scores, axis=1)
mean_test = np.mean(test_scores, axis=1)

# Plot
plt.plot(param_range, mean_train, label="Training Score", color='b')
plt.plot(param_range, mean_test, label="Validation Score", color='g')
plt.title("Validation Curve with KNN")
plt.xlabel("Number of Neighbors")
plt.ylabel("Accuracy")
plt.legend()
plt.show()